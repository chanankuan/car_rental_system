openapi: 3.0.0
info:
  title: Car Rental System
  description: >
    Car Rental System that manages vehicles, rentals, customers, and payments.
    Supports guest and registered users, tracks personal identification,
    pricing, and discounts to handle the full car rental process.
  version: "1.0.0"
servers:
  - url: http://localhost:3000
    description: Local development server

tags:
  - name: Auth
    description: Endpoints for registration, login, logout, and password changes
  - name: Users
    description: Endpoints for retrieving and updating user information
  - name: Cars
    description: Endpoints for listing and retrieving cars

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "48c275f5-383e-4dea-bd0e-a7e49dab0866"
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: john.doe@example.com
        phoneNumber:
          type: string
          example: "+1234567890"
        isVerified:
          type: boolean
          example: true
        role:
          type: string
          example: user
    BadRequestException:
      type: object
      properties:
        statusCode:
          type: integer
          example: 400
        error:
          type: string
          example: BadRequest
        message:
          type: string
          example: Bad request
    UnauthorizedException:
      type: object
      properties:
        statusCode:
          type: integer
          example: 401
        error:
          type: string
          example: Unauthorized
        message:
          type: string
          example: Unauthorized
    ForbiddenException:
      type: object
      properties:
        statusCode:
          type: integer
          example: 403
        error:
          type: string
          example: Forbidden
        message:
          type: string
          example: Forbidden
    NotFoundException:
      type: object
      properties:
        statusCode:
          type: integer
          example: 404
        error:
          type: string
          example: NotFound
        message:
          type: string
          example: Not Found
    ConflictException:
      type: object
      properties:
        statusCode:
          type: integer
          example: 409
        error:
          type: string
          example: Conflict
        message:
          type: string
          example: An account with these details already exists
    InternalServerError:
      type: object
      properties:
        statusCode:
          type: integer
          example: 500
        error:
          type: string
          example: InternalServerError
        message:
          type: string
          example: Server error
    BadRequestValidation:
      type: object
      properties:
        statusCode:
          type: integer
          example: 400
        error:
          type: string
          example: BadRequest
        message:
          type: string
          example:
            Password must include uppercase, lowercase, number, and special
            character
    InvalidCredentials:
      type: object
      properties:
        statusCode:
          type: integer
          example: 401
        error:
          type: string
          example: Unauthorized
        message:
          type: string
          example: Invalid credentials
    Location:
      type: object
      properties:
        name: { type: string, example: "Praga District" }
        building: { type: string, example: "25" }
        city: { type: string, example: "Warsaw" }
        street: { type: string, example: "Targowa" }
        postalCode: { type: string, example: "03-734" }
    Car:
      type: object
      properties:
        id:
          {
            type: string,
            format: uuid,
            example: "139652ed-a207-4d3a-a71a-c8ef752a53f6",
          }
        color: { type: string, example: "silver" }
        licensePlateNumber: { type: string, example: "WA01234" }
        currentMileage: { type: integer, example: 6000 }
        isAvailable: { type: boolean, example: true }
        location: { $ref: "#/components/schemas/Location" }
        make: { type: string, example: "Audi" }
        model: { type: string, example: "A4" }
        year: { type: integer, example: 2023 }
        bagCapacity: { type: integer, example: 2 }
        doors: { type: integer, example: 4 }
        fuelType: { type: string, example: "petrol" }
        hasAC: { type: boolean, example: true }
        seats: { type: integer, example: 5 }
        suitcaseCapacity: { type: integer, example: 2 }
        transmissionType: { type: string, example: "manual" }
        category: { type: string, example: "premium" }
        createdAt:
          {
            type: string,
            format: date-time,
            example: "2025-09-21T09:02:44.340872+00:00",
          }
        updatedAt:
          {
            type: string,
            format: date-time,
            example: "2025-09-21T09:02:44.340872+00:00",
          }
        deletedAt:
          type: string
          format: date-time
          nullable: true
          example: null
    Pagination:
      type: object
      properties:
        total: { type: integer, example: 10 }
        page: { type: integer, example: 4 }
        pageSize: { type: integer, example: 3 }

paths:
  /api/auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [firstName, lastName, email, phoneNumber, password]
              properties:
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                email:
                  type: string
                  pattern: '^[\w-.]+@([\w-]+\.)+[\w-]{2,4}$'
                  example: john.doe@example.com
                phoneNumber:
                  type: string
                  example: "+1234567890"
                password:
                  type: string
                  minLength: 8
                  pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])"
                  example: "StrongPass123!"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Validation unsuccessful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestValidation"
        "409":
          description: Conflict – Email or phone already in use
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConflictException"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

  /api/auth/login:
    post:
      tags: [Auth]
      summary: Log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  example: john.doe@example.com
                password:
                  type: string
                  example: StrongPass123!
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvalidCredentials"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

  /api/auth/logout:
    post:
      tags: [Auth]
      summary: Log out the current user
      responses:
        "204":
          description: Logout successful, no content
        "401":
          description: Unauthorized – No active session
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

  /api/auth/change-password:
    patch:
      tags: [Auth]
      summary: Change password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [oldPassword, newPassword]
              properties:
                oldPassword:
                  type: string
                  minLength: 8
                  example: "OldStrongPass123!"
                newPassword:
                  type: string
                  minLength: 8
                  pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])"
                  example: "NewStrongPass456!"
      responses:
        "204":
          description: Password changed successfully, no content
        "400":
          description: Validation unsuccessful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestValidation"
        "401":
          description: Unauthorized – Not logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
  /api/users/me:
    get:
      tags: [Users]
      summary: Get current user profile
      responses:
        "200":
          description: Current user info
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized – No active session
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedException"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/cars:
    get:
      tags: [Cars]
      summary: Get a paginated list of cars
      description:
        Returns an array of cars and pagination information. Supports filtering
        by several attributes.
      parameters:
        - name: page
          in: query
          description: Page number (1-based)
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: pageSize
          in: query
          description: Number of cars per page
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
        - name: make
          in: query
          description: Filter by car make (e.g. Toyota, Ford)
          required: false
          schema:
            type: string
        - name: model
          in: query
          description: Filter by car model
          required: false
          schema:
            type: string
        - name: seats
          in: query
          description: Filter by number of seats
          required: false
          schema:
            type: integer
            minimum: 1
        - name: fuelType
          in: query
          description: Filter by fuel type (e.g. petrol, diesel, electric)
          required: false
          schema:
            type: string
        - name: smallBags
          in: query
          description: Filter by minimum number of small bag capacity
          required: false
          schema:
            type: integer
            minimum: 0
        - name: largeBags
          in: query
          description: Filter by minimum number of large bag capacity
          required: false
          schema:
            type: integer
            minimum: 0
        - name: category
          in: query
          description: Filter by car category (e.g. SUV, Sedan)
          required: false
          schema:
            type: string
        - name: transmissionType
          in: query
          description: Filter by transmission type (e.g. Automatic, Manual)
          required: false
          schema:
            type: string
      responses:
        "200":
          description: A paginated list of cars
          content:
            application/json:
              schema:
                type: object
                properties:
                  cars:
                    type: array
                    items:
                      $ref: "#/components/schemas/Car"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

  /api/cars/{id}:
    get:
      tags: [Cars]
      summary: Get a single car by its ID
      description: Retrieve detailed information about one car.
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the car to retrieve
          schema:
            type: string
            format: uuid
            example: "094356c6-7678-4ae9-b213-cd1cb5bb786d"
      responses:
        "200":
          description: Car details
          content:
            application/json:
              schema:
                type: object
                properties:
                  car:
                    $ref: "#/components/schemas/Car"
        "404":
          description: Car not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundException"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
